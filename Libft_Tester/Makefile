#  How to use this `Makefile`:
#
#- make: This will compile all your test files, link them with your existing `libft.a`, and then run the `run_tests` executable.
#- make clean: Removes all the `.o` files generated by the test compilation.
#- make fclean: Runs `clean` and then removes the `run_tests` executable.
#- make re: Runs `fclean` then `all`, effectively rebuilding and rerunning all your tests from scratch.
#
#This `Makefile` assumes `libft.a` is already present. If you ever need to rebuild `libft.a` itself, you'd use its own `Makefile` (like the one I provided earlier) separately.

# üß™ Test Suite Configuration
CC = gcc
RM = rm -f

# üì¶ Paths
LIBFT_PATH = ./libft.a
INCLUDES_DIR = ./includes
TEST_DIR = ./tests
TEST_UTILS_DIR = ./test_utils

# üöÄ Test Executable Name
TEST_EXEC = run_tests

# üìù Test Source Files
# Add all your individual test files (e.g., test_ft_strlen.c) here
TEST_SRCS = $(TEST_DIR)/main.c \
            $(TEST_DIR)/test_ft_strlen.c \
            $(TEST_DIR)/test_ft_putchar.c \
            $(TEST_DIR)/test_ft_putstr.c \
            $(TEST_DIR)/test_ft_strcmp.c \
            $(TEST_DIR)/test_ft_swap.c \
            # ... and so on for all your libft functions

# Test Utility Source Files
TEST_UTILS_SRCS = $(TEST_UTILS_DIR)/test_utils.c

# Combine all source files that need to be compiled for the test executable
ALL_TEST_SRCS = $(TEST_SRCS) $(TEST_UTILS_SRCS)

# Generate object file names from source files
TEST_OBJS = $(ALL_TEST_SRCS:.c=.o)

# ‚öôÔ∏è Compilation Flags
# -I for include directories (libft.h and test_utils.h)
CFLAGS = -Wall -Wextra -Werror -I$(INCLUDES_DIR) -I$(TEST_UTILS_DIR)

# üîó Linker Flags
# -L. to look for libraries in the current directory, -lft to link libft.a
LDFLAGS = -L. -lft

# üéØ Main Rules

# Default rule: build and run tests
all: $(TEST_EXEC)
	./$(TEST_EXEC)

# Rule to build the test executable
$(TEST_EXEC): $(TEST_OBJS) $(LIBFT_PATH)
	$(CC) $(CFLAGS) $(TEST_OBJS) $(LDFLAGS) -o $(TEST_EXEC)

# Generic rule for compiling .c to .o
# This will compile files from TEST_DIR and TEST_UTILS_DIR
$(TEST_DIR)/%.o: $(TEST_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

$(TEST_UTILS_DIR)/%.o: $(TEST_UTILS_DIR)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

# üßπ Cleaning Rules
clean:
	$(RM) $(TEST_OBJS)

fclean: clean
	$(RM) $(TEST_EXEC)

re: fclean all

.PHONY: all clean fclean re

